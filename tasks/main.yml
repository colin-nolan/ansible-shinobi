---

- name: validate mandatory variables
  assert:
    that: item | mandatory
  loop:
    - "{{ shinobi_database_root_password }}"
    - "{{ shinobi_database_user_name }}"
    - "{{ shinobi_database_user_password }}"
    - "{{ shinobi_super_user_email }}"
    - "{{ shinobi_super_user_password }}"
    - "{{ shinobi_super_user_token }}"
  no_log: true

- name: install apt prerequisites
  package:
    name:
      - tzdata
      - git
    cache_valid_time: "{{ shinobi_apt_cache_valid_time }}"

- name: install RPi apt prerequisites
  package:
    name:
      - build-essential
      - libffi-dev
      - libssl-dev
      - python3-dev
  when: shinobi_docker_is_rpi

- name: install Python prerequisites
  become: yes
  pip:
    name:
      - "{{ item }}"
  loop:
    - docker
    - docker-compose
    - shinobi-client

- name: create directories
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    mode: 0770
  loop:
    - "{{ shinobi_data_directory }}"
    - "{{ shinobi_video_directory }}"
    - "{{ shinobi_source_directory }}"
    - "{{ shinobi_docker_directory }}"
    - "{{ shinobi_config_directory }}"

- name: clone Shinobi Docker setup files
  become: yes
  git:
    repo: "{{ shinobi_docker_source.repository }}"
    version:  "{{ shinobi_docker_source.version }}"
    dest: "{{ shinobi_docker_directory }}"

# See file type information: https://docs.docker.com/compose/env-file/
- name: create Docker compose configuration
  become: yes
  template:
    src: compose.env.j2
    dest: "{{ shinobi_docker_compose_config_location }}"
    mode: 0600

# https://docs.docker.com/compose/environment-variables/#the-env-file
- name: symlink configuration into the same directory as docker-compose.yml
  file:
    src: "{{ shinobi_docker_compose_config_location }}"
    dest: "{{ shinobi_docker_directory }}/.env"
    state: link

- name: setup containerised services
  become: yes
  docker_compose:
    build: yes
    project_name: shinobi
    project_src: "{{ shinobi_docker_directory }}"

- name: wait for Shinobi to start
  wait_for:
    host: "{{ shinobi_host_address }}"
    port: "{{ shinobi_host_port }}"

- name: wait for Shinobi to correctly service HTTP requests
  uri:
    url: "http://{{ shinobi_host_address }}:{{ shinobi_host_port }}"
    status_code: 200
  register: result
  until: result.status == 200
  retries: 120
  delay: 1
  changed_when: false

- name: setup Shinobi users
  shinobi_user:
    host: "{{ shinobi_host_address }}"
    port: "{{ shinobi_host_port }}"
    email: "{{ item.email }}"
    password: "{{ item.password }}"
    state: present
    token: "{{ shinobi_super_user_token }}"
  loop: "{{ shinobi_users }}"

- name: setup Shinobi monitors (cameras)
  shinobi_monitor:
    host: "{{ shinobi_host_address }}"
    port: "{{ shinobi_host_port }}"
    email: "{{ item.email }}"
    password: "{{ item.password }}"
    state: present
    id: "{{ item.id }}"
    configuration: "{{ item.configuration }}"
  loop: "{{ shinobi_monitors | addUserDetailsToMonitor(users=shinobi_users) | list }}"
